From 358ab30bd51b47846113b8bbd1188ce3bc06d9b0 Mon Sep 17 00:00:00 2001
From: "TH\\A" <oiiuiio@naver.com>
Date: Mon, 28 Nov 2016 11:16:48 +0900
Subject: [PATCH] LibNews

---
 .../com/kosta/controller/LibNewsController.java    | 466 +++++++++++++++++++++
 src/main/java/com/kosta/dao/LibNewsDAO.java        |  75 ++++
 src/main/java/com/kosta/dao/LibNewsDAOImpl.java    | 130 ++++++
 .../java/com/kosta/service/LibNewsService.java     |  73 ++++
 .../java/com/kosta/service/LibNewsServiceImpl.java | 146 +++++++
 .../com/kosta/controller/LibNewsController.class   | Bin 12581 -> 12568 bytes
 target/classes/com/kosta/dao/F_BoardDAO.class      | Bin 1030 -> 0 bytes
 target/classes/com/kosta/dao/F_BoardDAOImpl.class  | Bin 3604 -> 0 bytes
 target/classes/com/kosta/dao/NoticeDAO.class       | Bin 581 -> 0 bytes
 target/classes/com/kosta/dao/NoticeDAOImpl.class   | Bin 2336 -> 0 bytes
 .../classes/com/kosta/service/F_BoardService.class | Bin 1042 -> 0 bytes
 .../com/kosta/service/F_BoardServiceImpl.class     | Bin 3237 -> 0 bytes
 .../classes/com/kosta/service/NoticeService.class  | Bin 593 -> 0 bytes
 .../com/kosta/service/NoticeServiceImpl.class      | Bin 2240 -> 0 bytes
 14 files changed, 890 insertions(+)
 create mode 100644 src/main/java/com/kosta/controller/LibNewsController.java
 create mode 100644 src/main/java/com/kosta/dao/LibNewsDAO.java
 create mode 100644 src/main/java/com/kosta/dao/LibNewsDAOImpl.java
 create mode 100644 src/main/java/com/kosta/service/LibNewsService.java
 create mode 100644 src/main/java/com/kosta/service/LibNewsServiceImpl.java
 delete mode 100644 target/classes/com/kosta/dao/F_BoardDAO.class
 delete mode 100644 target/classes/com/kosta/dao/F_BoardDAOImpl.class
 delete mode 100644 target/classes/com/kosta/dao/NoticeDAO.class
 delete mode 100644 target/classes/com/kosta/dao/NoticeDAOImpl.class
 delete mode 100644 target/classes/com/kosta/service/F_BoardService.class
 delete mode 100644 target/classes/com/kosta/service/F_BoardServiceImpl.class
 delete mode 100644 target/classes/com/kosta/service/NoticeService.class
 delete mode 100644 target/classes/com/kosta/service/NoticeServiceImpl.class

diff --git a/src/main/java/com/kosta/controller/LibNewsController.java b/src/main/java/com/kosta/controller/LibNewsController.java
new file mode 100644
index 0000000..2886e46
--- /dev/null
+++ b/src/main/java/com/kosta/controller/LibNewsController.java
@@ -0,0 +1,466 @@
+package com.kosta.controller;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.stereotype.Controller;
+import org.springframework.ui.Model;
+import org.springframework.web.bind.annotation.ModelAttribute;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestMethod;
+import org.springframework.web.bind.annotation.RequestParam;
+
+import com.kosta.service.BestService;
+import com.kosta.service.LibNewsService;
+import com.kosta.vo.F_BoardVO;
+import com.kosta.vo.F_Board_ReVO;
+import com.kosta.vo.NoticeVO;
+import com.kosta.vo.PageMaker;
+import com.kosta.vo.PageMaker_rep;
+
+//이 페이지가 Controller이라는 것을 알려줌
+@Controller	
+public class LibNewsController {
+
+	private static final Logger logger = LoggerFactory.getLogger(LibNewsController.class);
+
+	@Autowired
+	private LibNewsService service;
+	@Autowired
+	private BestService service1;
+
+	 /*본 게시물 작성페이지 띄우기*/
+	
+	// 주소값을 정해주고 GET 방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/register", method = RequestMethod.GET)
+	
+	// F_BoardVO:본 게시물 속성 값	, Model에서 담아서 넘겨줌
+	public String registerGET(F_BoardVO vo, Model model) throws Exception {	
+		
+		// Console 창에 띄어줌
+		logger.info("register get 페이지 입니다.");
+		logger.info(vo.toString());		
+
+		// AuthenticationManager에 인증을 요청할 때 필요한 정보를 담는 목적
+		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+
+		// id의 정보를 담아 넘김
+		model.addAttribute("id", auth.getName());
+		
+		// register.jsp(글쓰기)페이지로 이동
+		return "userLibrary/libNews/f_board/register";
+	}
+
+	/*작성페이지의 작성값을 보내기*/
+	
+	// 글쓰기 페이지에서 확인버튼을 누르면 POST방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/register", method = RequestMethod.POST)
+	
+	// vo에 담아서 보냄, Model에 담아 보냄
+	public String registerPost(Model model, F_BoardVO vo) throws Exception {
+
+		// Console 창에 띄어줌
+		logger.info("register post");
+		logger.info(vo.toString());	
+
+		// F_BoardService로 담은 vo를 보냄
+		service.f_regist(vo);		
+
+		// 업데이트된 listAll을 띄어줌
+		return "redirect:listAll";	
+	}
+
+	/*전체 목록 띄우기*/
+	
+	// 페이징 추가
+	// 전체 목록을 GET방식으로 불러옴
+	@RequestMapping(value = "userLibrary/libNews/f_board/listAll", method = RequestMethod.GET)
+	public String listALL(Model model,@ModelAttribute("pageInfo") F_BoardVO vo) throws Exception {
+		
+		// Console 창에 알림띄어줌
+		logger.info("listAll 페이지");	
+		
+		// 다음 페이지로 값을 넘겨줌, list라는 별칭으로 service.listAll()을 담음
+		model.addAttribute("list", service.f_listAll(vo));	
+		
+		// 페이징 처리
+		PageMaker pageMaker = new PageMaker();
+		pageMaker.setPageInfo(vo);
+
+	    pageMaker.setTotalCount(service.f_listAllCount(vo));
+	    model.addAttribute("pageMaker", pageMaker);
+	    
+	    // listAll.jsp 페이지로 이동
+		return "userLibrary/libNews/f_board/listAll";	
+	}
+
+	/*상세 내용으로 띄우기*/
+	
+	// 상세내용을 GET방식으로 가져옴
+	@RequestMapping(value = "userLibrary/libNews/f_board/read", method = RequestMethod.GET)
+	
+	public String read(F_BoardVO vo, Model model,@ModelAttribute("pageInfo_rep") F_Board_ReVO vo2) throws Exception {
+		
+		// Console 창에 알림띄어줌
+		logger.info("read get 페이지");		
+		
+		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+		vo.setId(auth.getName());
+		
+		service.f_updateViewCnt(vo);
+		
+		// boardVO라는 별칭으로 service.read(vo)를 담음 , 그 vo(num을 가져오기 위해)에 해당하는 content를 띄우기 위해서
+		model.addAttribute("boardVO", service.f_read(vo));	
+		// num 값을 보냄
+		model.addAttribute("num", vo);	
+		// 답변 목록 띄우기 위해서
+		model.addAttribute("clist", service.f_commentList(vo2));
+	    model.addAttribute("id", auth.getName());
+		
+	    // 페이징 처리
+		PageMaker_rep pageMaker = new PageMaker_rep();
+		pageMaker.setPageInfo(vo2);
+	    pageMaker.setTotalCount(service.f_repAllCount(vo2));
+	   
+	    model.addAttribute("pageMaker", pageMaker);
+	    
+	 // read.jsp로 페이지 이동
+		return "userLibrary/libNews/f_board/read";	
+	}
+
+	/* 댓글 작성시 값보내서 띄우기*/
+	
+	// 댓글 작성시 값을 POST방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/read", method = RequestMethod.POST)	
+	public String register_rePOST(Model model, @RequestParam("num") int num, @ModelAttribute("pageInfo_rep") F_Board_ReVO vo2)
+			throws Exception {
+		
+		// Console 창에 알림띄어줌
+		logger.info("comment post");
+		logger.info(vo2.toString());	
+		
+		// num 값을 보내줌
+		model.addAttribute("num", num);
+		
+		// 댓글에 담은 값들 (vo2)를 F_BoardService로 보냄
+		service.f_insertComment(vo2);
+
+		return "redirect:/userLibrary/libNews/f_board/read?num="+num;
+	}
+
+	/* 본 게시물 수정 페이지 띄우기*/
+	
+	// 수정페이지를  GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/modify", method = RequestMethod.GET)	
+	// num은 어떤 Content인지 알아야 하므로 값을 가져옴
+	public void modifyGET(F_BoardVO vo, @RequestParam("num") int num, Model model) throws Exception {
+		
+		// Console창에 띄움
+		logger.info("modify GET 페이지");		
+		
+		// service.read(vo)를 boardVO로 기재하여 사용
+		model.addAttribute("boardVO", service.f_read(vo));	
+	}
+
+	/*본 게시물에서 수정한 내용을 보내기*/
+	
+	// 수정내용을 POST방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/modify", method = RequestMethod.POST)	
+	public String modifyPOST(Model model, @RequestParam("num") String num, F_BoardVO board)
+			throws Exception {
+
+		// Console창에 띄움
+		logger.info("modify GET 페이지");		
+		model.addAttribute("num", num);
+
+		service.f_modify(board);
+
+		return "redirect:read?num="+num;
+	}
+
+	/*댓글 수정하기*/
+	
+	// 댓굴 수정을 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/modify_re", method = RequestMethod.GET)	
+	
+	// 본게시물 num의 외래키인 fnum과 댓글의 num을 가져와서 댓글을 구별
+	public void modify_reGET(@RequestParam("num") String num,@RequestParam("fnum") String fnum, Model model) throws Exception {
+		
+		// Console창에 띄움
+		logger.info("modify_re GET 페이지");		
+		
+		// 댓글의 내용을 보여줌
+		model.addAttribute("boardVO2",service.f_read2(Integer.parseInt(num)));	
+	}
+
+	/*댓글 수정내용 값 보내기*/
+	
+	// 댓글 수정 내용 값을 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/modify_re", method = RequestMethod.POST)	
+	public String modify_RePOST(@RequestParam("num") String num,@RequestParam("fnum") String fnum, F_Board_ReVO board)
+			throws Exception {
+		
+		// Console창에 띄움
+		logger.info("modify_re POST 페이지");		
+
+		service.f_update_re(board);
+
+		// 글쓰기 num의 외래키인 댓글의 fnum을 불러옴
+		return "redirect:read?num="+fnum;	
+	}
+
+	/*삭제하기*/
+	
+	// 기입한 주소값으로 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/f_board/remove", method = RequestMethod.GET)	
+	public String removeGET(@RequestParam("num") int num) throws Exception {
+		
+		// Console창에 띄움
+		logger.info("remove GET 페이지");		
+		
+		service.f_remove(num);
+
+		// 삭제 후의 listAll 띄어주기
+		return "redirect:listAll";	
+	}
+
+	/*삭제하기*/
+	
+	// 삭제값을 GET방식으로 가져옴
+	@RequestMapping(value = "userLibrary/libNews/f_board/remove_re", method = RequestMethod.GET)	
+	public String remove_reGET(@RequestParam("num") String num,@RequestParam("fnum") String fnum) throws Exception {
+		
+		// Console창에 띄움
+		logger.info("remove_re POST 페이지");		
+		
+		// string 형태의 num을 int로 바꿔줌
+		int n = Integer.parseInt(num);	
+		
+		// int 형태의 num을 보내줌
+		service.f_remove_re(n);	
+
+		// 댓글이 달려있는 본게시물을 띄어줌
+		return "redirect:read?num="+fnum;	
+	}
+	
+	///////////////////////공지사항 게시판 구현////////////////////////////////
+
+	/*본 게시물 작성페이지 띄우기*/
+	
+	// 주소값을 정해주고 GET 방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/register", method = RequestMethod.GET)	
+	
+	// noticeVO:본 게시물 속성 값	
+	public String no_registerGET(NoticeVO noticeVO, Model model) throws Exception {	
+		
+		// Console 창에 띄어줌
+		logger.info("register get 페이지 입니다.");	
+		
+		// AuthenticationManager에 인증을 요청할 때 필요한 정보를 담는 목적
+		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+
+		// id의 정보를 담아 넘김
+		model.addAttribute("id", auth.getName());	
+		
+		// register.jsp(글쓰기)페이지로 이동
+		return "userLibrary/libNews/notice/register";	
+	}
+
+	/*작성페이지의 작성값을 보내기*/
+	
+	// POST방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/register", method = RequestMethod.POST)	
+	
+	// noticeVO에 담아서 보냄
+	public String no_registerPost(Model model, NoticeVO noticeVO) throws Exception {
+					
+		//id title content
+		// Console 창에 띄어줌
+		logger.info("register post");
+		logger.info(noticeVO.toString());	
+
+		// noticeVOService로 담은 vo를 보냄
+		service.n_regist(noticeVO);		
+
+		// 업데이트된 listAll을 띄어줌
+		return "redirect:listAll";	
+	}
+
+	/*전체 목록 띄우기*/
+	
+	// 페이징 추가
+	// 기입한 주소값으로 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/listAll", method = RequestMethod.GET)	
+	public String no_listALL(Model model, @ModelAttribute("pageInfo") NoticeVO vo) throws Exception {
+		
+		// Console 창에 알림띄어줌
+		logger.info("listAll 페이지");		
+		
+		// 다음 페이지로 값을 넘겨줌, list라는 별칭으로 service.listAll()을 담음
+		model.addAttribute("list", service.n_listAll(vo));	
+		
+		// 페이징 처리
+		PageMaker pageMaker = new PageMaker();
+		pageMaker.setPageInfo(vo);
+	    pageMaker.setTotalCount(service.n_listAllCount(vo));
+	    model.addAttribute("pageMaker", pageMaker);
+	    
+	    // listAll.jsp 페이지로 이동
+		return "userLibrary/libNews/notice/listAll";	
+	}
+
+	
+	/*상세 내용으로 띄우기*/
+	
+	// 기입한 주소값으로 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/read", method = RequestMethod.GET)	
+	
+	// RequestParam으로 num 값을 가져옴
+	public String no_read(@RequestParam("num") int num, Model model) throws Exception {	
+		
+		// Console 창에 알림띄어줌
+		logger.info("read get 페이지");		
+		
+		service.n_updateViewCnt(num);
+		
+		// boardVO라는 별칭으로 service.read(num)을 담음 , 그 num에 해당하는 content를 띄우기 위해서
+		model.addAttribute("noticeVO", service.n_read(num));	
+		
+		// num 값을 보냄
+		model.addAttribute("num", num);	
+		
+		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+	    model.addAttribute("id", auth.getName());
+		
+	    // read.jsp로 페이지 이동
+		return "userLibrary/libNews/notice/read";	
+	}
+
+	/*본 게시물 수정 페이지 띄우기*/
+	
+	// 기입한 주소값으로 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/modify", method = RequestMethod.GET)	
+	
+	// num은 어떤 Content인지 알아야 하므로 값을 가져옴
+	public void no_modifyGET(@RequestParam("num") int num, Model model) throws Exception {
+		
+		// Console창에 띄움
+		logger.info("modify GET 페이지");		
+		
+		// service.read(num)을 boardVO로 기재하여 사용
+		model.addAttribute("noticeVO", service.n_read(num));	
+	}
+
+	/*본 게시물에서 수정한 내용을 보내기*/
+	
+	// 기입한 주소값으로 POST방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/modify", method = RequestMethod.POST)	
+	public String no_modifyPOST(Model model, @RequestParam("num") String num, NoticeVO noticeVO)
+			throws Exception {
+
+		// Console창에 띄움
+		logger.info("modify GET 페이지");		
+		
+		model.addAttribute("num", num);
+
+		service.n_modify(noticeVO);
+
+		return "redirect:read?num"+num;
+	}
+
+	/*삭제하기*/
+	
+	// 기입한 주소값으로 GET방식으로 보냄
+	@RequestMapping(value = "userLibrary/libNews/notice/remove", method = RequestMethod.GET)	
+	public String no_removeGET(@RequestParam("num") int num) throws Exception {
+		
+		// Console창에 띄움
+		logger.info("remove GET 페이지");		
+		
+		service.n_remove(num);
+
+		// 삭제 후의 listAll 띄어주기
+		return "redirect:listAll";	
+	}
+	
+	@RequestMapping(value="userLibrary/libNews/schedule", method=RequestMethod.GET)
+	public String userList(Model model) throws Exception {
+		
+		logger.info("회원정보관리 페이지");
+		
+		
+		
+		return "userLibrary/libNews/schedule";
+	}
+	
+	@RequestMapping(value="userLibrary/libNews/best/listBest", method=RequestMethod.GET)
+	public String listBestGET(Model model) {
+		logger.info("사서추천도서!!!!!");
+		return "userLibrary/libNews/best/listBest";
+	}
+	
+	@RequestMapping(value = "/userLibrary/libNews/best/best", method = RequestMethod.GET)
+	public void best(Model model) throws Exception {
+		logger.info("best");
+		model.addAttribute("best", service1.best());
+	}
+	
+	@RequestMapping(value = "/userLibrary/libNews/best/genre1", method = RequestMethod.GET)
+	public void genre1(Model model) throws Exception {
+		logger.info("best");
+		model.addAttribute("genre1", service1.genre1());
+	}
+	@RequestMapping(value = "/userLibrary/libNews/best/genre2", method = RequestMethod.GET)
+	public void genre2(Model model) throws Exception {
+		logger.info("best");
+		model.addAttribute("genre2", service1.genre2());
+	}
+	@RequestMapping(value = "/userLibrary/libNews/best/genre3", method = RequestMethod.GET)
+	public void genre3(Model model) throws Exception {
+		logger.info("best");
+		model.addAttribute("genre3", service1.genre3());
+	}
+	@RequestMapping(value = "/userLibrary/libNews/best/genre4", method = RequestMethod.GET)
+	public void genre4(Model model) throws Exception {
+		logger.info("best");
+		model.addAttribute("genre4", service1.genre4());
+	}
+
+	// 상세보기
+	@RequestMapping(value = "/userLibrary/libNews/best/read", method = RequestMethod.GET)
+	public void read(@RequestParam("BNO") String BNO, Model model) throws Exception {
+		logger.info("read");
+		System.out.println("넘버"+BNO);
+		model.addAttribute("read",service1.read(BNO));
+	}
+	
+	// 사서 추천 리스트 보기
+		@RequestMapping(value="userLibrary/libNews/recommand/recommand", method=RequestMethod.GET)
+		public String recommandGET(Model model) {
+			logger.info("사서추천도서!!!!!");
+			return "userLibrary/libNews/recommand/recommand";
+		}
+		//사이트 누르면 그 사이트로 바로 이동 기능 
+		@RequestMapping(value="userLibrary/libNews/recommand/recommand_k", method=RequestMethod.GET)
+		public String recommand_kGET(Model model) {
+			logger.info("사서추천도서 상세보기!!!!!!!");
+			return "userLibrary/libNews/recommand/recommand_k";
+		}
+		@RequestMapping(value="userLibrary/libNews/recommand/recommand_y", method=RequestMethod.GET)
+		public String recommand_yGET(Model model) {
+			logger.info("사서추천도서 상세보기!!!!!!!");
+			return "userLibrary/libNews/recommand/recommand_y";
+		}
+		@RequestMapping(value="userLibrary/libNews/recommand/recommand_24", method=RequestMethod.GET)
+		public String recommand_24GET(Model model) {
+			logger.info("사서추천도서 상세보기!!!!!!!");
+			return "userLibrary/libNews/recommand/recommand_24";
+		}
+		@RequestMapping(value="userLibrary/libNews/recommand/recommand_b", method=RequestMethod.GET)
+		public String recommand_bGET(Model model) {
+			logger.info("사서추천도서 상세보기!!!!!!!");
+			return "userLibrary/libNews/recommand/recommand_b";
+		}
+}
diff --git a/src/main/java/com/kosta/dao/LibNewsDAO.java b/src/main/java/com/kosta/dao/LibNewsDAO.java
new file mode 100644
index 0000000..ba5083a
--- /dev/null
+++ b/src/main/java/com/kosta/dao/LibNewsDAO.java
@@ -0,0 +1,75 @@
+package com.kosta.dao;
+
+import java.util.List;
+
+import com.kosta.vo.F_BoardVO;
+import com.kosta.vo.F_Board_ReVO;
+import com.kosta.vo.NoticeVO;
+
+public interface LibNewsDAO {
+	
+		////// 자유게시판 //////
+	
+		// 본 게시물의 모든 목록 보기
+		public List<F_BoardVO> f_listAll(F_BoardVO vo) throws Exception;
+		
+		// 본 게시물의 목록 보기 페이징
+		public int f_listAllCount(F_BoardVO vo) throws Exception;
+
+		// 본 게시물 작성
+		public void f_create(F_BoardVO vo) throws Exception;
+		
+		// 본 게시물의 내용 상세보기
+		public F_BoardVO f_read(F_BoardVO vo) throws Exception;
+		
+		// 본 게시물 수정
+		public void f_update(F_BoardVO vo) throws Exception;
+		
+		// 본 게시물 삭제
+		public void f_delete(int num) throws Exception;
+		
+		// 댓글 삭제
+		public void f_delete_re(int num) throws Exception;
+		
+		// 댓글 내용 보기
+		public F_Board_ReVO f_read2(int num) throws Exception;
+		
+		// 댓글 페이징
+		public int f_repAllCount(F_Board_ReVO vo) throws Exception;
+
+		// 댓글 등록
+		public void f_insertComment(F_Board_ReVO vo2) throws Exception ;
+		
+		// 댓글 목록 조회
+		public List<F_Board_ReVO> f_commentList(F_Board_ReVO vo) throws Exception;
+		
+		// 댓글 수정
+		public void f_update_re(F_Board_ReVO vo2)throws Exception;
+
+		// 게시글 조회수 증가
+		public void f_updateViewCnt(F_BoardVO vo) throws Exception;
+		
+		
+		////// 공지사항 //////
+		
+		// 본 게시물의 모든 목록 보기
+		public List<NoticeVO> n_listAll(NoticeVO vo) throws Exception;
+		
+		// 게시물 페이징 처리
+		public int n_listAllCount(NoticeVO vo) throws Exception;
+		
+		// 본 게시물 작성
+		public void n_create(NoticeVO vo) throws Exception;
+		
+		// 본 게시물의 내용 상세보기
+		public NoticeVO n_read(int num) throws Exception;
+		
+		// 본 게시물 수정
+		public void n_update(NoticeVO vo) throws Exception;
+		
+		// 본 게시물 삭제
+		public void n_delete(int num) throws Exception;
+
+		// 게시글 조회수 증가
+		public void n_updateViewCnt(int num) throws Exception;
+}
diff --git a/src/main/java/com/kosta/dao/LibNewsDAOImpl.java b/src/main/java/com/kosta/dao/LibNewsDAOImpl.java
new file mode 100644
index 0000000..1953ed1
--- /dev/null
+++ b/src/main/java/com/kosta/dao/LibNewsDAOImpl.java
@@ -0,0 +1,130 @@
+package com.kosta.dao;
+
+import java.util.List;
+
+import org.apache.ibatis.session.SqlSession;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Repository;
+
+import com.kosta.vo.F_BoardVO;
+import com.kosta.vo.F_Board_ReVO;
+import com.kosta.vo.NoticeVO;
+
+@Repository
+public class LibNewsDAOImpl implements LibNewsDAO {
+	////// 자유게시판 //////
+	
+	@Autowired
+	private SqlSession sqlSession;
+
+	@Override
+	public void f_create(F_BoardVO vo) throws Exception {
+		sqlSession.insert("com.kosta.mappers.libNewsMapper.f_create", vo);	// F_BoardMapper의 create로 보냄
+	}
+
+	@Override
+	public F_BoardVO f_read(F_BoardVO vo) throws Exception {
+		return sqlSession.selectOne("com.kosta.mappers.libNewsMapper.f_read", vo);
+	}
+
+	@Override
+	public F_Board_ReVO f_read2(int num) throws Exception {
+		// TODO Auto-generated method stub
+		return sqlSession.selectOne("com.kosta.mappers.libNewsMapper.f_read2", num);
+	}
+
+	@Override
+	public void f_update(F_BoardVO vo) throws Exception {
+		sqlSession.update("com.kosta.mappers.libNewsMapper.f_update", vo);
+	}
+
+	@Override
+	public void f_delete(int num) throws Exception {
+		sqlSession.delete("com.kosta.mappers.libNewsMapper.f_delete", num);
+	}
+
+	@Override
+	public void f_delete_re(int num) throws Exception {
+		sqlSession.delete("com.kosta.mappers.libNewsMapper.f_delete_re", num);
+	}
+
+	@Override
+	public List<F_BoardVO> f_listAll(F_BoardVO vo) throws Exception {
+		return sqlSession.selectList("com.kosta.mappers.libNewsMapper.f_listAll",vo);
+	}
+
+	// 댓글달기
+	@Override
+	public void f_insertComment(F_Board_ReVO vo2) throws Exception {
+		sqlSession.insert("com.kosta.mappers.libNewsMapper.f_insertComment", vo2);
+		
+	}
+
+	@Override
+	public List<F_Board_ReVO> f_commentList(F_Board_ReVO vo) throws Exception {
+		
+		return sqlSession.selectList("com.kosta.mappers.libNewsMapper.f_commentList", vo);
+	}
+
+	@Override
+	public void f_update_re(F_Board_ReVO vo2) throws Exception {
+		sqlSession.update("com.kosta.mappers.libNewsMapper.f_update_re", vo2);
+	}
+
+	// 조회수 업데이트
+	@Override
+	public void f_updateViewCnt(F_BoardVO vo) throws Exception {
+		sqlSession.update("com.kosta.mappers.libNewsMapper.f_updateViewCnt", vo);
+		
+	}
+
+	@Override
+	public int f_listAllCount(F_BoardVO vo) throws Exception {
+		return sqlSession.selectOne("com.kosta.mappers.libNewsMapper.f_listAllCount", vo);
+	}
+
+	@Override
+	public int f_repAllCount(F_Board_ReVO vo) throws Exception {
+		return sqlSession.selectOne("com.kosta.mappers.libNewsMapper.f_repAllCount", vo);
+	}
+	
+	
+	////// 공지사항 //////
+
+	@Override
+	public void n_create(NoticeVO vo) throws Exception {
+		sqlSession.insert("com.kosta.mappers.libNewsMapper.n_create", vo);	// F_BoardMapper의 create로 보냄
+	}
+
+	@Override
+	public NoticeVO n_read(int num) throws Exception {
+		return sqlSession.selectOne("com.kosta.mappers.libNewsMapper.n_read", num);
+	}
+
+	@Override
+	public void n_update(NoticeVO vo) throws Exception {
+		sqlSession.update("com.kosta.mappers.libNewsMapper.n_update", vo);
+	}
+
+	@Override
+	public void n_delete(int num) throws Exception {
+		sqlSession.delete("com.kosta.mappers.libNewsMapper.n_delete", num);
+	}
+
+	@Override
+	public List<NoticeVO> n_listAll(NoticeVO vo) throws Exception {
+		return sqlSession.selectList("com.kosta.mappers.libNewsMapper.n_listAll",vo);
+	}
+
+	// 조회수 업데이트
+	@Override
+	public void n_updateViewCnt(int num) throws Exception {
+		sqlSession.update("com.kosta.mappers.libNewsMapper.n_updateViewCnt", num);
+		
+	}
+
+	@Override
+	public int n_listAllCount(NoticeVO vo) throws Exception {
+		return sqlSession.selectOne("com.kosta.mappers.libNewsMapper.n_listAllCount", vo);
+	}
+}
diff --git a/src/main/java/com/kosta/service/LibNewsService.java b/src/main/java/com/kosta/service/LibNewsService.java
new file mode 100644
index 0000000..de009b7
--- /dev/null
+++ b/src/main/java/com/kosta/service/LibNewsService.java
@@ -0,0 +1,73 @@
+package com.kosta.service;
+
+import java.util.List;
+
+import com.kosta.vo.F_BoardVO;
+import com.kosta.vo.F_Board_ReVO;
+import com.kosta.vo.NoticeVO;
+
+public interface LibNewsService {
+	
+		////// 자유게시판 //////
+		// 게시물의 전체 목록
+		public List<F_BoardVO> f_listAll(F_BoardVO vo) throws Exception;
+		
+		// 게시물의 전체 목록 페이징
+		public int f_listAllCount(F_BoardVO vo) throws Exception;
+		
+		// 본 게시물 작성
+		public void f_regist(F_BoardVO board) throws Exception;
+
+		// 본 게시물을 상세 내용
+		public F_BoardVO f_read(F_BoardVO vo) throws Exception;
+
+		// 본 게시물의 수정
+		public void f_modify(F_BoardVO f_board) throws Exception;
+
+		// 본 게시물 삭제
+		public void f_remove(int num) throws Exception;
+
+		// 게시물 내용의 댓글 목록
+		public List<F_Board_ReVO> f_commentList(F_Board_ReVO vo) throws Exception;
+
+		// 게시물 댓글을 페이징
+		public int f_repAllCount(F_Board_ReVO vo) throws Exception;
+
+		//  게시물 내용의 댓글 등록
+		public void f_insertComment(F_Board_ReVO vo2) throws Exception;
+		
+		// 게시물 내용의 댓글 내용 보기
+		public F_Board_ReVO f_read2(int num) throws Exception;
+		
+		// 게시물 내용의 댓글 수정
+		public void f_update_re(F_Board_ReVO board) throws Exception;
+		
+		// 게시물 내용의 댓글 삭제
+		public void f_remove_re(int num) throws Exception;
+		
+		// 조회수 업데이트
+		public void f_updateViewCnt(F_BoardVO vo) throws Exception;
+		
+		
+		////// 공지사항 //////
+		// 게시물의 전체 목록
+		public List<NoticeVO> n_listAll(NoticeVO vo) throws Exception;
+		
+		//페이징 처리
+		public int n_listAllCount(NoticeVO vo) throws Exception ;
+
+		// 본 게시물 작성
+		public void n_regist(NoticeVO noticeVO) throws Exception;
+
+		// 본 게시물을 상세 내용
+		public NoticeVO n_read(int num) throws Exception;
+
+		// 본 게시물의 수정
+		public void n_modify(NoticeVO noticeVO) throws Exception;
+
+		// 본 게시물 삭제
+		public void n_remove(int num) throws Exception;
+		
+		// 조회수 업데이트
+		public void n_updateViewCnt(int num) throws Exception;
+}
diff --git a/src/main/java/com/kosta/service/LibNewsServiceImpl.java b/src/main/java/com/kosta/service/LibNewsServiceImpl.java
new file mode 100644
index 0000000..fba3352
--- /dev/null
+++ b/src/main/java/com/kosta/service/LibNewsServiceImpl.java
@@ -0,0 +1,146 @@
+package com.kosta.service;
+
+import java.util.List;
+
+import javax.inject.Inject;
+
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.stereotype.Service;
+
+import com.kosta.dao.LibNewsDAO;
+import com.kosta.vo.F_BoardVO;
+import com.kosta.vo.F_Board_ReVO;
+import com.kosta.vo.NoticeVO;
+
+@Service
+public class LibNewsServiceImpl implements LibNewsService {
+	////// 자유게시판 //////
+	@Inject
+	private LibNewsDAO libNewsDAO;
+
+	// 게시물을 담을 vo가 필요하다.
+	@Override
+	public void f_regist(F_BoardVO f_board) throws Exception {
+		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+		f_board.setId(auth.getName());
+		libNewsDAO.f_create(f_board);
+	}
+
+	// 어떤 게시물을 상세보기 하기 위해선 num
+	@Override
+	public F_BoardVO f_read(F_BoardVO vo) throws Exception {
+		return libNewsDAO.f_read(vo);
+	}
+
+	// 등록한 댓글을 보기 위해서
+	@Override
+	public F_Board_ReVO f_read2(int num) throws Exception {
+		return libNewsDAO.f_read2(num);
+	}
+
+	// 수정하기 위해 vo 필요하다.
+	@Override
+	public void f_modify(F_BoardVO board) throws Exception {
+		libNewsDAO.f_update(board);
+	}
+
+	// 삭제할 게시물의 번호가 필요하다.
+	@Override
+	public void f_remove(int num) throws Exception {
+		libNewsDAO.f_delete(num);
+	}
+	
+	@Override
+	public void f_remove_re(int num) throws Exception {
+		libNewsDAO.f_delete_re(num);
+	}
+
+	// list 형태로 모든 list 출력
+	@Override
+	public List<F_BoardVO> f_listAll(F_BoardVO vo) throws Exception {
+		return libNewsDAO.f_listAll(vo);
+	}
+
+	// 댓글을 담을 vo2가 필요하다.
+	@Override
+	public void f_insertComment(F_Board_ReVO vo2) throws Exception {
+		libNewsDAO.f_insertComment(vo2);
+	}
+
+	@Override
+	public List<F_Board_ReVO> f_commentList(F_Board_ReVO vo) throws Exception {
+		return libNewsDAO.f_commentList(vo);
+	}
+
+	@Override
+	public void f_update_re(F_Board_ReVO board) throws Exception {
+		libNewsDAO.f_update_re(board);
+		
+	}
+
+	// 조회수 업데이트
+	@Override
+	public void f_updateViewCnt(F_BoardVO vo) throws Exception {
+		libNewsDAO.f_updateViewCnt(vo);
+	}
+
+	// 글 페이징
+	@Override
+	public int f_listAllCount(F_BoardVO vo) throws Exception {
+		return libNewsDAO.f_listAllCount(vo);
+	}
+	// 댓글 페이징
+	@Override
+	public int f_repAllCount(F_Board_ReVO vo) throws Exception {
+		return libNewsDAO.f_repAllCount(vo);
+	}
+	
+	
+	
+	////// 공지사항 //////
+
+	// 게시물을 담을 vo가 필요하다.
+	@Override
+	public void n_regist(NoticeVO noticeVO) throws Exception {
+		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+		noticeVO.setId(auth.getName());
+		libNewsDAO.n_create(noticeVO);
+	}
+
+	// 어떤 게시물을 상세보기 하기 위해선 num
+	@Override
+	public NoticeVO n_read(int num) throws Exception {
+		return libNewsDAO.n_read(num);
+	}
+
+	// 수정하기 위해 vo 필요하다.
+	@Override
+	public void n_modify(NoticeVO noticeVO) throws Exception {
+		libNewsDAO.n_update(noticeVO);
+	}
+
+	// 삭제할 게시물의 번호가 필요하다.
+	@Override
+	public void n_remove(int num) throws Exception {
+		libNewsDAO.n_delete(num);
+	}
+
+	// list 형태로 모든 list 출력
+	@Override
+	public List<NoticeVO> n_listAll(NoticeVO vo) throws Exception {
+		return libNewsDAO.n_listAll(vo);
+	}
+
+	// 조회수 업데이트
+	@Override
+	public void n_updateViewCnt(int num) throws Exception {
+		libNewsDAO.n_updateViewCnt(num);
+	}
+
+	@Override
+	public int n_listAllCount(NoticeVO vo) throws Exception {
+		return 	libNewsDAO.n_listAllCount(vo);
+
+	}
+}
diff --git a/target/classes/com/kosta/controller/LibNewsController.class b/target/classes/com/kosta/controller/LibNewsController.class
index 10f80511ed59d59f00a97a2a0c28936ce6c4b79b..3e37bf1dedfc8dc09165a7aba900e198e7adf8ca 100644
GIT binary patch
literal 12568
zcmbVS349dyb$(9=JFLclS6CnpA%TT;!Ggemku8Tq!g6E@BqCyiEmqP<EUb3rJ;3+`
zBO5zDVz<VziS2~MN76Wrg9%2aO`N-R+Qe;ow{BYZ4sz3`P46c8-hXCiXGgO~f`4Xb
zXJ`KJd+&YkdvE^3+dqBt%S5!EANNrS)5_u4c<@jxkqiZgW6@+h7Ks?~V0U<^$2gMM
zW}op<8PmLjp~InIBorMB_6{91hLcRQBC)YCBhD1)j>X4<iOA^sgTZcfu8ql;Fye>9
z!v@px?u;GlWZFo-c?~YF?n_0J;c;UioCps^j4jb<EE!6MW6=cDCUgCXcsM#X8V`*d
zM`H0q!673QO$0|n!^v3uXfR~o5ZsbV#*T#J#t4?xEQ4#AmU+O~Y9x{w4BEBBk#IDe
zY-cKMXdGZF+ZG!!{B${0`Y6D(!0l$IX<VoIbOqDwF(YZZ&s5*goe9{sNGOqLYn&OS
z*@Q)PDyLaYbGyS)qbD^!WW;xe5CIj|;ZS5C6c5XH>*TC!6+%Ci(h{8((Hx*m9ta~!
z4G#bEr4v!9h#O<!MAC@w=-AD4qw~(gv0&%m)>tS$GSJ)R8TV8;coV`BfkPP=`;(F!
zEbZ^OW7wEbiSyA4rpnAU_Aj|Idc+tC4uzv5&Sdr(x2KS#n?e&4rh)Rqp-2kRxiW>+
zf~)ZmvL7)y8yp=R66nFSe<10&kvtF^VcO{FOg@w9Mz~apC~4HpRF_`17MZSn|M6$0
zpFcPK%CXw%7aq9u$U~PNd2w|Gt)ifhR-<0rT+wL_frVw^=xB`T3MW6T;582TX&qhd
zLw!<JrevHM(P;y11gn!V^B$)84IXLm(>2uQqs>g$D;TcINf^VacsO|!RUbE0=^J+>
zgZ<W7DSUjtAr=`i;yPVR*CDHL*gDU29Zdex%eGa}^|ZxDA7HxXmtI7tt+b8la-c%7
zA26UC!%8fe))xgX`>r;PI+#krBNeoRx_op4)0)EAve(e*M#+p1kb0m{71T{VKDvo%
ziPuW$8q%qkb~5Rqk&!J)l+aKr32JZmAcv#YO#Myki7U71mEqG$_;eUtTj&r5Cz(L)
z@^PtTrW((L+G~NfA;g)f)$_V+K4r%RM)Y*q>_n?ka+5D4ZMo2T@Eo{y_V%MV_c2|T
zwo*F*Goq}w>Et7=g7(vpk3vkfnVPb?f~yVbG)zzmZFJCFi)nFAX>1(OXcT3RHiK3(
zoZK9Npl*pEmOgdV-OaQjpG4W$FVF6LJ44dppv^_JKri)D+H8{v;nyZYV@4NLN277n
zjAb_?UmAfUWpY|Vb-PY+LN}Q`I%p$o${huhmZ@Yof><V!5S^4;ymrF;O`$_Z+)qhb
zB7fbX(^0w;Z75+R<yQg6w8&*8{YzWpfB?H&r+esLra3mSZ83}td2`ey){g0PobCrf
zU~M;siimYzSwoj3aT2~tgcL-LKyp{T*!U64vbYffLkt(xVmqcMwFmnQv|3Mg*XART
z2}Kv|5<qZvLZe49Hpmaz9ZLGj<2rp*8c;dH&;_O2PfzOfE5i4=ql2l5kx&w|mvLlU
zG^x>3V6keX1HE$L(>i^Oo<T2_!Vv#kbNb)t=_35o=rlTMG&Qc#a{z%s%jDY&I(>pZ
ziR_FHqCCeT<-#MTRo*7Dg5{*$r$C@geM9E#v`Jw6bVjImhF%ity$r!~EiYH6qi7NC
zGdg{ieoZ063Mg%hH||@l<Xgx<xifT3qle+`;aDr^=@}98YIKL}U$a1iZ*$Y41}8-6
zn0gvKCD@kguIvS~!8w|UJ+N)?T+d5ctWit}6!Liv%5J4hNv@yH%kc6BX8Ei{I3f6H
ziZ1%-P3TZ&F6_d*f#(RFeuI7!#8dNKFSNA^1?oU-U4{W-KYc}~x9F>iy5T6q9K(s?
z&dkI*ts}8M`Z`ALjBPUvTT@{fb~O4X6J|$C(SwDm?|RVrIzN4lzAcmZS~>b{o!+MJ
zpj0rg8c~$Wl58ik?6t`qS2J-JGzgtIJbF|O<eOdOw0uAnb$KSsPQE;|EYFA9G@{Y(
zV{kN&Yhf|d3oz-Kr%kf$D?m0!b}T-5vd>%IB#(cj(;r(cHx2Dim4aC*5V^6V{O1ze
zzfjWPPN0W;S~*1#1!ls80x5k1g-yGtFBSTZ{G(Ue%e(`OWTC!r7GM$$WmHMx--47j
zknEIb^!MoDmKwK80sW&+|3p7jjXj=#YC$bMA1Asb!qYmvPydXvGPN6mR3nVcS)qv6
zWfqb?OLF>)i%IS!omFf_P@^BC(Pms0zGY}A!2eyRpGb*Uq`Q-f*X+149y@I2>I$#Y
z0{*-eVBW9M|DXcQ<Lq#Y>HpK||7BuOgP@pGGprn>X|k!Pka+lAfEgwtSkV~!GYjpn
zwKL+wWjdD&NW{m!3{n!sgcOxw!0~|J<<gU$7@n78=qR8jUUlO+(_*g%3))ZJ8qY@X
z%##DXpmsLhZ1d1>2UPRv09f-DSB|ATLha{y=tq1xsw0b<Y4gZ5SL!^Uv2~+Gt%%JW
zL(`X|c|aY3SB=Fo-h1-Q^couy>S;i1RO`Hm7enErnTfhFS4J#9GLwz0uvF(7UM7i6
zuV9TL?vXizwM*j#D0&rMnb_7f6lxt_$zJBAVwQ&@%>u4o=as_4xlz{?$rbW*qs~o?
zy^~oIVL`HJhWyy5HO7XK4$P)5C_!Fc5IE9Omj|c07F5k%*X(V33lVKbk13vd;`ln9
z*IU#wA!xh-V~;&uq+6Tmv01{(<9yDTm&x**b#7A{C2=)1N;9J%(=!J2yjA2;E*Mq3
zqL>&yV2q?95G3r_EP4O*qthRMV)~P(F1>#4hv$x6dim9iXlsmp(+VNJ?5gH=WeC5j
z`jE>s?tnf_-~a0L<a5*KpPD}V+@+6B;<!%!XpBvsGPxcpF60qtP~$nVDSPsl#yhYr
zz}-4kkY2$(ywk@}r==NnNN)=WvVL=GTIU_S3o}G|n=MnB;PjXgjT?BTs?BZKyhP(Z
zF*u-epR8uyh+bUi##W8@$c=k--jlg;UEv$oX}nKv+^_S#%#G^{-?(1mklbkK9FiN?
zd3Cz{+{&K`Qw2)5_Vj9WayB30aUWyX#PNQi|0uSm$91$a><W~|QZnC|>J-Lf9rl@%
z7$S_&c$>zzBbJvYpSg5)($5J_`54!lJI>jc>U>z9eSNZ7mW)KjL2N>t<fBZG;u)3h
znveP*Tmvyo7TC!GS;j-r5k>E-yb8v?1ntneSmV1O-uBnQL+b9vBJUnNr13GlteIIP
zwbLh#PfuQuTD<U@su-ym*(1r=GM^}lwslnF6Y8<kf<D-~UV&{Y7HlgB^k5c(p<m3~
zA&v3u?C+1I;=@K~SYCuw&3GlXT2jW;?5T3{V#A0fk4_jt*|RoZYqe1wwggM@_Nx@n
zYIx&<qY~L4#M#+6o`p}pItOuZovXuDm(d)Yor^0P@hN|12lxWbd!4Gjh%Y6y5P!=e
zM2o3fogsX~3mWUTAU@^S@}@UvvHO;4b&J@=1+<iE@QF88R136qI4;At<qGFQ99;=>
z^?QjEw34pEr$G%sCD<Ou^=0^6dzPvKO;glTLO5zZPp#_s0&SWisB}+DVEd{m>SR1k
ze6W=E1a`fKn@k_70D!0&!Dyi>3Iaqct){CLz$SBX3n0u;AN4EHYiT!q2rDe301eO{
zz+n0?-CQ*MTNM0ptRN{`A@KL6;kTsWH=UzfTc&8RgaSqea6p0D0>E1VxC1e}L4lRn
zVJREz3I$Ojyh6b)0mLytEXy0=1C9uXaqpZG{Ka$-|JNtzkb?aZ){v-o2<(W0-5iKo
zXeUanAYY{9&2P}*o>lPY$SUjCyGpQYa$j@c1k#~0@j%A08qkvvUq2$c6hQ0g7HXn>
zw25wotNR@p>9C#bu$}C%oUBJcCh0+yk(2aL0e2sExjRo{=y3QW;xN}?6)B)o;_xF`
z)Y@FuTwSK9b)Fs*C!43}i4tlF{HpckR5~6lfoJiXINcKXxcrC^JfHb-yS0pY$wfMY
z;C*^?d3E`!^YmhMxpl)U62H&21Wr_!TLFAE6Tl6qT0)NeG>$j4QIK;2b&|j<trT_A
z5rp&(3e#QK@V*;I_s~hY4?CjwtH8FK4%&e|WmEl>MRmAOpQm3(VCU0uMfx(Vv;x8Y
z0!oPKHTq)F!M+7Jh^i&njEYs<I*kvDW-99RG)xK2+9m3*r>g_u_>x7rXO~={3uYLs
z@O-(1F4EU-4t(Pc`qq;3^jqiYcQWBIEB!Hq=W!IylYssdUSB@#;8nZre!I=9b~;VJ
zi#i1k%YCNr()S9u`i>W`9Ilcoq$pMq4{OB3-&0<#nn|3Dc+OEJeg+=A2&6ALkk{DA
zYwX0;*vM;?H=<GBr#~nfxtSzY5i^jVuyPa3Aa4#l3$YS@TgmuCD;a-+WIzM{EGrqN
zihTjDyaqm<MF%+Na3^TH6SNZ%ggfu5L<H$CArs=x59qH7xbxSpM1XS+XY9lGkOgTd
zw_6#h6Tkk(%E;e|L(LcHAExM1x?tT&c?+I=9n$j+hZl9W7j+7|XmK6AXL(U)C*?=<
zFGYJ{SB?!`>c%Rev==EWJN4qlzbY@Rocvq9oS5|bE<AY$Ir+ZBlX}~edfStF+mm|a
zLv(@ZKj=RTc=BJaeCRSI*a{#i=tqvF+!hG<|F*#|o}&NFZiFV>cLDbYfcu_;TV>vA
z!(E_iKy3V!ewH5^vXdDuM4lE%$F!l@hwmw(+-HTj87M266-=Q>y99da6qn`;v`PMH
zJeU25=FyKaHT}d9>}DH%vmNYaE7<dBG0%b?A=vC=4WD&Dnqyqz*$$5+w0BydS4wEj
zaVgh`RLTB~aw@!BN`Ba`#H!0#ci>%V<6X%W_(f>GQjxoaD)FB+AMs@@87mHN{`rXK
z+O%ky;y^YnOt94eyNIfIDb;eV0-I+(Qm~P2t^&lo^ARs_gf!QD^fJ~ES?`oEyXGTa
zm{t(4`G}Xe=A%lk&7?sMNQ_aHSJP5nOZD7JO}vga@p{_I8yzX>v{TY)>t`qRAvu_&
zkpgQ#;yPYlz~2=!{k1FMG<+0VN#7TLcZt8|cqCP@c#5yYBvi>)S>GDcu45EhY`5;*
z3~X_`z8$W2(tPfs2JXh2q#g|Sz4%8beGb=m*{<)hY9GKXHnuz1xC%kcpXy){t{YfG
zrkG{oy4k_K9CmdJz739qsD_6e%v@#zUuFYeW&vkjgM1eYH(%qPv?O3n2C%zvbE~Oc
zm3(#1&dm{c5Jf5`;6>aK{x!B2Yi#DNQ8Ff)zD8A=h}XtKoq{*H!v70&3ce;=5>%()
zy8-!LKt8VE=Ij)FEninar`jFRqyToHti-*!2x=u?uf(a6w`Az+m!J70Rq!JY<8$p;
z&9!31ycNbvW<L4yw!9{{TP8c*CZB-GCkvR|!8a7}x65UGFRmAVh4qzuquKm$&~%PJ
zIK}u!VCEd?X8qFu^D*${83!OI>*bLetr~lVg#h&z2WYnm=tH>xJqJL~1JDZv0PQIV
z=)=VUy4eJDOD;fX0O(Ty^yvbC_7wzlYjJ>XGXV|e0`xKfy#hd=DF7%`5YSL@fQC&#
zcyZ#*q0a%(s{r)*{D836Ia)w3#~gsHPM+>;d_amB{~x#HeWN0JSP}g!ACzazN}hl^
zVyj7>YtC~VvL6=g%~O0N-RCj|U=Af`0seJNPv>X@e@QuD4ka6HA=n7h@2UxEqb>b+
z=8%ND91hG>p|m92?UsZ$0pg+~dR{7YPY#p!<~4brr9#KuCf|a|uNE+Qe-4u;iZVIr
zHu+7M{8j;z59BcUU{NMdx=p?fliw*|@}V3io%>KTbD0k8N8BdA2b1sQHCcj=gRM?}
LG`;J~j}iSGV`hjH

literal 12581
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
TugMZV10I*4_vn*gK1=j}Ywn7^

diff --git a/target/classes/com/kosta/dao/F_BoardDAO.class b/target/classes/com/kosta/dao/F_BoardDAO.class
deleted file mode 100644
index f679bbf34c15d7a8862185da2ecd6119368bbd9a..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1030
zcmb7C+fKqz5S)Y9TC|Ab9mU%Vm}nE?o5n;z5)286B)m4YJ(yx?Nomn<^T7}Bql|l~
zfmkllw{vD^XJ;>;U+*6PE^#U&!LVa`UG2r|2Zm-Do>tZGJj1stw+$IdhD^s87@A|a
z&syWD!_9y}cI<v|>o^Q&h59&oFv@K;u8Q?xUKrSpRww!uL+bv`<h{W5+`bHjAv;zc
zMHrN({p=b+=yQh3pXIM-`M9CN>9+pkxa@^4HISRFTVs$+pBn*{pF?XgB#C7)lxAzq
z@<b)Vo;55XS=`~GR<ckllBg2>b<zEzC{SX^Q)sG`{>W+43~HPBJzB_5d->^>B6^WJ
zRBgA<{h;i1yIjm;egfHArY#Gq*d)XGT>Z(#Km3P3eUp)Qu}mcz-Ecx`^lsVwwJiEb
zHNDU`dDV7ke5>O_z7UrtF)%F9-2*D!^&%uBAk!~N_!3g|N?@5HD^Lj;MF>e_HHKuc
v7DLu2I9Y7OIGYp57Pe!Y9qh)CJ>+7@J`SdM&y&-`3GUHvU!-(A?DXUtVp#L;

diff --git a/target/classes/com/kosta/dao/F_BoardDAOImpl.class b/target/classes/com/kosta/dao/F_BoardDAOImpl.class
deleted file mode 100644
index 12a471a32c1df1fe1664d781e7dd664e95a6945b..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3604
zcmb7GT~`}b6x}xg@<Bp@SZqthsx1VNOhv5N&}x8!sVPxXgWqwI+=PM2Ogb|G`=5N!
zwOm$xaQW<ya(V7dI+>6OlRjkbe4M+_KKtx@Z~p!7ufG9opc6re;bu*5NvFDL$x>a`
zrM=3wE*tgTTruBjs}YPbOrOYSvZTsdQz}+Zc+HAng5lb*c?@y$nOfqespuNRVnH{W
zlH8VS$6QjXvZa`k>3oz*Zd{h(`e8@2lol^5rczaTPSbRYqIJz=*t9{+wxMXvh9S53
zxo(_FRW56$)R1eIZakM{cY>7bSo*nQ@H)XxY$=*zJ!A-{m&*)eJ9?eR5yq7SCXryc
zQcyI0&}mh<@l>X~46_BjCaY!HP{ech<(PG>5Rrw#u(E|*B3;ekvPCHKX;0{xD{Q%#
z6*S_HeyZ`dU0np%7*air-7hgP+(;mTXcRXY(v&%4H!9PT+ih-`8C9ts@N@Ht{g`P~
zoZORGz^w@0WVk(w^a;F$w~4r-ncT1#mePeDnUW<W&wAcC7RWB=8A4||`CwR?q%}!V
zXILMu#IU(hq{%tK1&ait+?51Y@h(Hm<SH4os8ItpN2_D7v<NZ`bG<%$o5wINa;}pT
z()ndy`jtaYO^$+MmPV^!Jx;6fUIZU7%=DzsYZh;EBY_XG$q+e{)ebK<h?z({5SESL
zKCK}?);1yXzt(9nFzVYxr(GwHM)C1Tu5zM<%((;}*j}lV%);bj#HAd?qmgi&Ndjj-
zfo*{kb6!;p;_{ebHCQfp0x6;@rj=7whLuYUW((D^6jdrvI4#gvNoi`b)iH?v?#L6j
zd|OR@en_4EoMAbbdY7)K|1g0Po{EjqwyR*qaPL+8>a8g0tlS;F)#4ffE%;aE_)@g%
zD+Vc;?*-KGnNE(L_tn9HW|$;Y!NDnL?NT0&g}rq=ewBFthB!n-Pbv&+!8P{rjX6fQ
z-B=yTjqU`7q;p?Z`1y`zMM3TwLF2wj3{#Ct*CjhT9fp@4BKas3hD>mcUPQ6coF<@x
zc7mv)S!J=Q*heF63&{qR-li4RO@6tLDF3sOH15NUm-LQN<9muYXjA=vHZo$ZlJ34|
zy=ifS>(=u&mkxPbHx+T_XX)r7_VgR4Uq~F4G{)%P%><2c8mDNaW1g-_dXi{lG>)&l
zz|^mF6T&oIMX(5+p{od`0L&sqBg1RBN>OukKSocl+c0~SGDL5tR(`|v+4<E!@kSU&
zJ-oR6^(w{A*_d-qbQe=(dIz@&jo}U!2hexB=+id(5}_}L@ekI1p^RR>H$2$WF7~vG
zE#d9}_I?*TWn;fL{|Dah!hduT{+0(m<-(_s#g<L|L7*@XiTWo#!rUQY7Cq=wE_zRx
zZR`w?&v(hs*yMK|@_RlBR;a71o&+;)f*F_or-2Fb!xKo9;BG*I&rl$~J>xvF+jn3a
zDA%ndX;)GtoxTX;Vgoij36gFFNw>dWqC6l`zcY`9IP*S{*z%xz8}K#0vD^DCzVo5~
zy$}5#{ORXB3Hs?f34RQuFAwq09+BAhp!?CU1-i371ie7$2Sd<bF53p01Jd^|tz$yB
qm+i*yIQjX)%02YJdzaQrcnx|0eETx^qoMFZ`49}7j_K}`7Vtmv@hGVP

diff --git a/target/classes/com/kosta/dao/NoticeDAO.class b/target/classes/com/kosta/dao/NoticeDAO.class
deleted file mode 100644
index d0528d9e5a1bf5de30a2f6757231cf634071b8df..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 581
zcma)3!A`<J6r9D{6%<5KF@Awu?8O_#1W^+bVh<#}nsvJ&i))vZE&6R9`~W}7_*%6@
zOcQUrGxKI9@4bJ#z5zJLF-MJ|EA3P8XctZdv9Q6Nby}+HLCE1Tv}a-|0wa=X5I)S5
zbPU|+g&P>d&^sNkW|u#sQP}T|i?PgU6O2jSXK38KNHurbCJT-_LuX}NG7R;Jo+iR&
zsbaYLulq$si%W`aCHLQThc-*7{Yj<kh{2bs5{|N~RS|<nqBz%#dKJm!l+EM9$&Zy$
zxur*P8g70Okyg*cyia3dvs9{EZAjB9mw%S8$7f*Jpi=>yZm|g;HE{ZQgm0liuNt<A
i*+G+#k|Csp-8H0*y)|V2kEVlzHO=8~gxI4ZwfhO7nT96-

diff --git a/target/classes/com/kosta/dao/NoticeDAOImpl.class b/target/classes/com/kosta/dao/NoticeDAOImpl.class
deleted file mode 100644
index 996a7c26696c7b0b1dc1192e0eefb42bce3ab5e7..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2336
zcmb7FQFjwX6#ga&-85_pX`~fPRS-+kVpb8MnpzEoVlXt?U{GH;lVlnOHoI|m(#n7G
zLC^81_~7B$ALa4RZrp5XV#34j?Cjq8zVCkb=H~Bz{`?ETb$o9i!LZVHd)8CeSKR7w
z*V=QHY>V5KdbQWL4Wt;(KH-Plvboc>>a8cDtqjaDEKfMbknw-88^ZUc>oBa<T(4{K
zK5su3mTYk)eajC&T8${K%y52x;3(M>P3g;)Eh>)VDvEX;pJ6iq@%x^1x(6Qbi6hs0
zYPAG+eCvR>mFqpTcyz$343v8$J<%c9xh?5Pwat($6q^jG9k(MgNaBo%(=Zv%)TAT!
z2ECT>9&qAiSgg5iZa29n^?vv=r5;NXvRa#vwKhw$wLQTVfxJ<OMIQd=YO`L}A~JV=
zY>R%7n}OFE@*{(zFY_P}69&?0Two{=Zz(8JsmJ?$;rS(7w)Vu4e?QokoJS$`X}pQI
z4ZOv0c^2bMT*M{PEgfHYis4G3HWJfN+VFDhO<4bOvC5D*bg2m@WJyMo5gqMAwKyRr
zjRLjD^t?1s2J5(LV1pqyl2>(<=nBuodnhp&huj{B`T@g|<~$Kr*3P_d;sab`nD>QE
zja+xARGYJ<977zsVBk8#xlu#J%1rI%40;TVjG7ztJJb_td^}Sb!)PtGY~p56oDPZA
zO_id=nrVDC6Ha(Y<5Wy+X&l3rzN*+ZLvdnvhFK1jw5=LNQ%lb`WY^(p;E{k^v!2_U
zQ1k6_8h43*dew(owf?G!d-zh%m7r)^7sHKLsaiarY-n&(ilZGzrLo6gO_y`*5W|A=
zXee;UrLpyYzxQey`wXS&6mdY^?+;9T1DY0T>8Pge?O=vcLuDH7z-x<L8BD8V^SY$l
zo?&C`y!4gugsYzQg|#pGt}pf6EYkoWV7gAxmCyr+)_MAWn4>jAtKQS7q<fZj7Ojld
zQ|rHD;TL*H;4IyBFeofXcO6OrSVW#yhSzY8qL%16MZ4tyW|t@v^k!lGSDas5*?5lC
zBp#0NGQrnHip>X@OJVd7lg{BCTqZPzcd>Q?{q7JwAD~}Z`2)r0u#$Lz4}T`oxa8#+
zd_IED<0IS%;BQV9ze(ah86*AziC>MOFGT1g@mu)xg!t-Ed@c~b9g6>a48cWm{!)w}
z7ZKzl`M0n`a3k+;2kGAlYET&xWdovJO5=+pUiN1#Mv#pNvXT9@sTtf4GZ<&lRmz|g
tBN&%K9bcWW=y-j<CgnkK*MCFfr<dw`Ee0R2Z`eKwJPhK$jXM52;9u}^6l(wg

diff --git a/target/classes/com/kosta/service/F_BoardService.class b/target/classes/com/kosta/service/F_BoardService.class
deleted file mode 100644
index 3952d73d7237727d1f37f0472bc95082b1472520..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 1042
zcmb7D+fKqj6r4q*0#;GH-!Cs<qD_cz8WTlLFeE0D@JedCkk!&9WsCZ2KKKECl<|~$
z38fHy+nt@AGiUbf`^W1WfMe`yNHFYJvTZ!dt}=}-_j<zO#&zRDnx0(?w;GZRxd*dn
z8jk6<jNAJMZYc)M5nXleI1C4c>aR#oe&4U(o)oM7d%hBmQ6>5bL+0w);vFTV+trX}
z$p0$;oG_$oqUD;(_c+7lpXE<S`8cD(GtI`A<FfQ!YG8e|ZiOM`@fJBAORF;^J#N|z
zrO{fWJW+|Zv_<o!U#l&9)M~O&DUxWG;%swQ1(7iv#%nk3cznV)|KZ0+7HS8n>CJ}6
zJM_$7p>2&7r`&Ym(j2LB*a5@%3)JjnkYFhwR*JD%g=T0b{ElrZPJU?Z@gTAOS`YEM
z;7{e?T{AW5dltVI4iWQ%!+aD>TZ(~Ug8l%Y(`-*7g#<L(B?+HGhE@q=>0}x@AwMUC
z%wRTx<S-XO=7%_WEJQeqSc<8+OchqJ8sV;CJ%VgtGlFalakhtQ?hN`Oh24Iqd!Ki8
B`UU_1

diff --git a/target/classes/com/kosta/service/F_BoardServiceImpl.class b/target/classes/com/kosta/service/F_BoardServiceImpl.class
deleted file mode 100644
index fb23a9b56b4baabb92c567dd919f9db45b9051f9..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 3237
zcmbVNYgZdp6x}yGBFR8sLJL#`t!;q9REk=JLTLb-Hb8|oKB}featQ;;Oq@&t{3k!?
zS}rSo@CW##T<$vwB<W-bc4Z|u_i^^wXP<M={pa7m{su6M!!SYuw=#A?Kd?)#p_imn
zF*8zMOFy;^C%avpCJM!T7@Y!__l=67=M5{TZ|>~Nj2lL`z-T*rfyi!pM**%Fw!l!b
zZjd$XQ)es7oAUyLTV=~N3o>Pv%$>Ykwk+E<T+_Bn0{uzl|4272<y%j918uq&Ov`i^
z1v+BmDS^(oos|)E;F5+YG=WP=(~=wI!j5!a7z7o#nzS=UK4mzjn%5RP-93|DZa2^i
z)<d~<WX>$P0>iNelge2@sm*ysC$f5!kwq_rFm4E3tBZKH6TuK}hA}L#WIH*%RCG)$
zx9b=Md1yNaOiQNhnC`Kju^q`D%aup2zFk|5SLaXcd{#OdKEMc_=A>I&7kC&OPrftk
zd=#VjD2y?IxpxN9@G)))Tp_FFvb!gl;*6J7f!Pa@Yqlb%+lYm6N8nz2PR+I&#xWrf
zCY259EAT!E)KjwUD(UAVxQpp9rUVA+#oCx!4La@#bd{u=$g(tJevI){4+Lg3gz;XK
zx9#&VJ`=c6$7?Qr4PT(2Rh4n1;gVOlc4uf3R9>uggL2Zz1@hZ01M9bwj!1nbxO#*9
zs%VxpEa0I)sKP7VrJ!a6Mq-KamPY9<$?Kr(Rx~W*G4HBXE(nMOBQDrkbN5(nCNw<t
zL?{=to(NrD+wksM!LCr1PI^eGqnjF@W1Tx$nU_kh9!IJpX-BH<Z4EEfc29Mit5h`4
z>$;rJ3rw67vsVjc*Uall9;Z${+h)!(+_HjLxv=3vOC2b}q9?=m8eW3kq1Uw7WO!E#
z1>Op!U`xBIe$~i-((npDP{E2#$%oH5FA!z5DPR?fz|^_m)e3Hm{OSKW-#Xwb@oLOc
zgMl3iTFq`PQ+pbARXDxX)s!g@<Cd#(c%Z>l)zG(_u4OK6^L044;U<)!tsxIqSMM%;
z6q)gw-TC5rrX>wU{LBWrZI_*lTr<^kaoztOPOCBzh_$|Wu5_gB9v3B>wD+RUV~o9^
zgWoQGL#ick?BOfi%`w8Uk0W0z{`PXFa}*rACf=a$H~tCXGJn-!;0izRj`9Gm;u>e{
zW9a9p0simg?79cD$CVDQjQokg6MQJJK6&>9p9uVc$%)_b>EsFShfv4AN?Tx%#D<7E
z%(vvG=WDczQu9STJir{i^w8&*n5P$^x`EIC5?4Y*jMkhjhVUz=jlqn04hE{n&KyMX
z$a5f6v*2EHSWU3QCy4uD?*zcEVvSq{zG|UXoQ@jVK53LD;%!YaSJMH|&uWa5Sobk*
zf+ph)KlFV<&jvuBvi|x4&|7}!2ZWw$1I=#4B-eHR#>>;UUKus%&6@enulHgA{An85
zvCbETus`~luaNm_0CXC!y;QQNv|yfT$vo?4o(O<{RD)-8YRf$5XTCw^&jX;J)u7qk
z+CuO9p<fa@6##vzH~XIt`t3AYA^h^zZG6=Rmc6kptmB7$9SEyZ7=r83D4#XN3h*DM
C)SBS{

diff --git a/target/classes/com/kosta/service/NoticeService.class b/target/classes/com/kosta/service/NoticeService.class
deleted file mode 100644
index 4ed7bb4da4ac464568c6b2cdc895ecd867a6f5b9..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 593
zcma)3O;5r=6r8P<N)<%#D_*?H#a_H&Oq6Is(#U~?t6AH%S!}zc-B$f;9{d6RDC27-
z5Nc{X?Y^0L^Je#be!YJHxWKUmgW=Ruk@Kul&7D*vx%7l{uQVN#pUQ&C(3$a^J0Xt)
zXZ$!5o@TH@nd<8>Wayu{E00_)+Na||-!0oREknm8^?<>?ef7j#OBJUUnhd>_@seR^
zPGk^soh5?d=D+TjH7TxWY&(8f#2u<Ert~MZt|Nv<A_9v0mukvjCW8BgX4J2lOiq#V
z<<nbf8L6C}W0IVjTiM*_T1=&Q85Vi$iOLdB+{utM-L(ar7hlw1VA!Cw0T%6J6Ac)!
ss4@xPf=xFA+r;dkMaYsNq>bGQ(!pK@>HgC6uwT&}tRuu8mQ#<u0jW-mBme*a

diff --git a/target/classes/com/kosta/service/NoticeServiceImpl.class b/target/classes/com/kosta/service/NoticeServiceImpl.class
deleted file mode 100644
index ee881bb6f31bd336f8477758e26ccf72fb51e3d0..0000000000000000000000000000000000000000
GIT binary patch
literal 0
HcmV?d00001

literal 2240
zcmbVMZF3V<7(F*lyChvG6kBLf3Su#7D+^i$OlgfNFTv0#!T37kY&Vy5VY8dr+=TW&
z`9WtKwSM3S_@f-p-K0%ISlZ#k?%jL$dCob{+x_>ye_jGu#m@#30#}@%VLcC8%C=fE
z?6{7!wgSba(%lssP0v75;Pf-QV_Tl>*RAsQGwCP;69NlIxC^BG2yW931m;S8^O_y>
zm^Sm}9REFT`^s&|s@rn6J(>6EXDc`GTLLpBO}=Znz9zPc(L$ezHP?65y1-Z_TNOwa
zf|^WY3{xg1VG2x@TwiXr8{0B`ViQzgx)eCJSG7Y|?|X+ywd0ayaX?*cE;MT>>uyU4
z%x4BXItSrY%Q-D3eRtQ9%_sl^=LOF8^LO|sjd{Fl;DW$L5Z0|$Gj#p>)6j0n7eV-(
z1##M;tM)7>2qj;>lDo>P^iB)i{e!@($<V}mxJc5vRK0V7JDF_htzmPMxP<o&To$<f
z)*vRX-~)j(RF!Y59mxVaQB4I_k0ox{i<+(?W8g!9>ql!E_BD~kl7K-eTg<P(I~33_
zNk!?@=h9fgH3J{9<@%jEP+1cet_zH}q$<{Elo^G{R#Oo8*o1)-lN__p416kZt`9fV
z_$F>*hAriU(pFS;qB||sGF@Vti+yf0ndCS|b%&F{=1r1_%I7o1Yz)2@y<uVvcQ{vm
zyCEQoRM-e=?$bT}bJN7#NOZedi$rrE8bOEZlSHj*lcI@-xKFQ|^rVi<@HjDf&lAYT
z4ox?gZRL7aiPjXGs<?IER_%}oUmn+QEhesYw$CcQHt`io0*Maqqm$hTs;+!d@Rk1k
z#KdDQ{FMJoPjMmOz4WG8FKWN<O?(SI^_8F<I`W>YFPqtsoAjFQIDyRTE2m^A1GU$b
zobl)?&fzk9X^hV}pM-8Ht|?yM6I|0=^`2K9-zT}VxC*Z0OMl_i@BB#MG~e17n8F#p
zwJ8lSjk8=i2AHAMEWeZ7or_?0crwP5i+^Ko9}5DHmRI(%DDWqim;S(w<$ZjTKp%ga
zzMyXk=ZQMUt7tyry3|GKaS;!<aGNYCa(<2+S%hx05&jLHB#1bv$u8_;J%Qi29Smk6
zBAD%(9TH693*-sPZh1{ug+W-xP#BCM9YHNJsaIp5yV?cr;XZALGd2WG#SccImkGTR
z1AU;HoynB-p&vz2Z$(8JN($ANN0V|R2L78U>q2+-k;*Hh%5PHntr+M7<!t^D=vNhg
Zm%y*DlyNNvwyQXSA0qo74_p2x;D6da?~woi

-- 
2.9.3.windows.2

